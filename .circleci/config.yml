version: 2.1

################# ORB #################
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.4.0

################# WORKFLOWS #################
workflows:
  build_and_test:
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-code-check
      - tests-no-kafka:
          requires:
            - build-and-code-check
      - tests:
          requires:
            - build-and-code-check
      - check-repo:
          requires:
            - build-and-code-check
            - tests-no-kafka
            - tests

################# JOBS #################
jobs:
  # Build the repo and check the code using pyflakes 
  build-and-code-check:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: pip install
          command: cd ~/project; pip install .[all]; cd -
      - run:
          name: code check
          command: cd ~/project; python -m pyflakes .; cd -
      - persist_to_workspace:
          root: .
          paths:
            - .
  # Run unittests that don't interact with the kafka cluster at all in parallel
  tests-no-kafka:
    docker:
      - image: cimg/python:3.7
    parallelism: 3
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
              - -pypi-v1-circleCI-{{ checksum "./requirements.txt" }}-{{ checksum "/home/circleci/.pyenv/version" }}-
      - run:
          name: run non-Kafka tests
          command: |
            cd test/unittests
            TESTCLASSES=$(circleci tests glob "test*parallel.py" | sed -e 's/.py//' | circleci tests split)
            python -m unittest $TESTCLASSES -v
      - persist_to_workspace:
          root: .
          paths:
              - .
  # Run unittests that DO interact with the kafka cluster sequentially
  tests:
    docker:
      - image: cimg/python:3.7
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
              - -pypi-v1-circleCI-{{ checksum "./requirements.txt" }}-{{ checksum "/home/circleci/.pyenv/version" }}-
      - run:
          name: run tests
          command: python -m unittest discover -s test/unittests -v -p test*_with_kafka.py
  # Make sure that the repository is clean after all tests have been run
  check-repo:
    docker:
      - image: cimg/python:3.7
    steps:
      - attach_workspace:
          at: .
      - run:
          name: check repo
          command: cd ~/project; sh test/test_repo_status.sh
