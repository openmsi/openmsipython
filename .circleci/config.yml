version: 2.1

################# ORB #################
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.4.0

################# WORKFLOWS #################
workflows:
  build_and_test:
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-code-check
      - tests-no-kafka:
          type: approval
          requires:
            - build-and-code-check
      - tests:
          type: approval
          requires:
            - build-and-code-check
      - check-repo:
          type: approval
          requires:
            - build-and-code-check
            - tests-no-kafka
            - tests

################# JOBS #################
jobs:
  # Build the repo and check the code using pyflakes 
  build-and-code-check:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: pip install
          command: cd ~/project; sh 'pip install .[all]'; cd -
      - run:
          name: code check
          command: cd ~/project; python -m pyflakes .; cd -
  # Run unittests that don't interact with the kafka cluster at all in parallel
  tests-no-kafka:
    docker:
      - image: cimg/python:3.7
    parallelism: 3
    steps:
      - run:
          name: test console scripts
          command: python -m unittest project.test.testconsolescripts
      - run:
          name: test config file parser
          command: python -m unittest project.test.testconfigfileparser
      - run:
          name: test argument parsing
          command: python -m unittest project.test.testargumentparsing
      - run:
          name: test creating producers and consumers
          command: python -m unittest project.test.testcreatingkafkaproducersandconsumers
      - run:
          name: test serialization
          command: python -m unittest project.test.testserialization
  # Run unittests that DO interact with the kafka cluster sequentially
  tests:
    docker:
      - image: cimg/python:3.7
    steps:
      - run:
          name: test datafilechunk
          command: python -m unittest project.test.testdatafilechunk
      - run:
          name: test datafile
          command: python -m unittest project.test.testdatafile
  # Make sure that the repository is clean after all tests have been run
  check-repo:
    docker:
      - image: cimg/python:3.7
    steps:
      - run:
          name: check repo
          command: cd ~/project; sh test/test_repo_status.sh
